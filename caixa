from datetime import datetime
import locale
import pandas as pd

class LancamentoDeCaixa:
    def __init__(self, observacao, valor):
        locale.setlocale(locale.LC_MONETARY, "pt_BR.UTF-8")
        self._data = datetime.today()
        self.observacao = observacao
        self._saldo = 0
        self._valor = round(valor, 2)

    def __str__(self):
        return f'Data: {self.data} | Observação: {self.observacao.capitalize()} ' \
               f'| Valor: {self._formata_o_valor()} | Saldo: {self._formata_o_saldo()}  '

    @property
    def data(self):
        data_padrao_brasil = self._data.strftime('%d/%m/%y')
        return data_padrao_brasil

    @property
    def numero_documento(self):
        return self._numero_documeto

    @property
    def saldo(self):
        return self._saldo

    @property
    def valor(self):
        return self._valor

    def __disponibilidade_de_saldo(self, valor_de_saida):  # criado para verificar se há saldo no caixa
        valor_disponivel = self._saldo - valor_de_saida
        return valor_disponivel >= 0

    def entrada_de_caixa(self):
        'esse metodo lança uma entrada de caixa considerando o valor instanciado'
        self._saldo += self.valor

    def saida_de_caixa(self):
        self._saldo -= self.valor

    def recebe_saldo_anterior(self, saldo_anterior):
        self._saldo = saldo_anterior

    def _formata_o_valor(self):
        valor_formatado = locale.currency(self._valor, grouping=True)
        return valor_formatado

    def _formata_o_saldo(self):
        valor_formatado = locale.currency(self._saldo, grouping=True)
        return valor_formatado


class Menu:

    def __init__(self, interacao):
        self.__interacao = interacao
        self.encerrar_programa = 's'

    def __str__(self):
        pass
    @property
    def interacao(self):
        return self.__interacao

    def informacoes_do_lancamento(self):
        print('**************************************:')
        descricao_do_lançamento = input('Descrição: ')
        valor_do_lancamento = float(input('Valor do lancamento: R$'))
        resposta = input("Entrada: E | Saida: S ===> ")
        resposta = resposta.upper()
        print('**************************************:')
        return resposta, descricao_do_lançamento, valor_do_lancamento

    def transforma_em_dataframe(self, lista_de_lancamentos):
        lista_de_lancamentos = enumerate(lista_de_lancamentos)
        for index, resultado in lista_de_lancamentos:
            print(f'Cod: {index} | {resultado}')

    def dicionario_de_lancamento(self, lista_descricao,lista_saida,lista_entrada, lista_saldo, lista_data):


        dicionario_de_lancamento = {'Data': lista_de_data,
                                    'Descricao': lista_de_descricao,
                                    'Entrada (C)': lista_de_entradas,
                                    'Saídas (D)': lista_de_saidas,
                                    'Saldo': lista_de_saldo}

        df = pd.DataFrame(dicionario_de_lancamento)

        return print(df)



interacao = input("Deseja fazer um lançamento?(S/N): ").upper()

resposta_do_usuario = Menu(interacao)
lista_de_lancamentos = []
lista_de_descricao = []
lista_de_saldo = []
lista_de_data = []
lista_de_entradas = []
lista_de_saidas = []


saldo_anterior = 0

if (resposta_do_usuario.interacao == 'S'):

    while resposta_do_usuario.encerrar_programa != "N":

        resposta_do_lancamento, descricao, valor = resposta_do_usuario.informacoes_do_lancamento()
        lista_de_descricao.append(descricao)


        if resposta_do_lancamento == "E":
            lancamento_de_entrada = LancamentoDeCaixa(descricao, valor)
            lancamento_de_entrada.entrada_de_caixa()

            saldo_anterior += lancamento_de_entrada.valor

            lista_de_lancamentos.append(lancamento_de_entrada)
            lancamento_de_entrada.recebe_saldo_anterior(saldo_anterior)

            lista_de_entradas.append(valor)
            lista_de_saidas.append('')
            lista_de_saldo.append(lancamento_de_entrada.saldo)
            lista_de_data.append(lancamento_de_entrada.data)

        elif resposta_do_lancamento == "S":
            lancamento_de_saida = LancamentoDeCaixa(descricao, valor)
            lancamento_de_saida.saida_de_caixa()

            saldo_anterior -= lancamento_de_saida.valor

            lancamento_de_saida.recebe_saldo_anterior(saldo_anterior)

            lista_de_saidas.append(valor)
            lista_de_entradas.append('')
            lista_de_saldo.append(lancamento_de_saida.saldo)
            lista_de_data.append(lancamento_de_saida.data)

        encerrar_while = input('Deseja fazer mais um lançamento? S/N: ')
        resposta_do_usuario.encerrar_programa = encerrar_while.upper()

        if encerrar_while == 'N':
            break

    print(f'\n{20 * "*"} LIVRO CAIXA {20 * "*"}')
    resposta_do_usuario.dicionario_de_lancamento(lista_de_descricao, lista_de_entradas, lista_de_saidas, lista_de_saldo,
                                                                                     lista_de_data)

    #lista_de_lancamentos = enumerate(lista_de_lancamentos)
    #for index, resultado in lista_de_lancamentos:
    #    print(f'Cod: {index} | {resultado}')
